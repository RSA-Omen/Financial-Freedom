{
  "project_structures": {
    "web_application": {
      "description": "Standard web application with frontend and backend separation",
      "directories": [
        "frontend/",
        "frontend/css/",
        "frontend/js/",
        "frontend/assets/",
        "frontend/components/",
        "backend/",
        "backend/routes/",
        "backend/models/",
        "backend/utils/",
        "docs/",
        "tests/"
      ],
      "required_files": [
        "README.md",
        "QUICK-START.md",
        "requirements.txt",
        ".env.example",
        ".gitignore",
        "docker-compose.yml",
        "frontend/index.html",
        "backend/app.py",
        "docs/API.md",
        "docs/USAGE.md",
        "DEVELOPMENT-NOTES.md",
        "NODUS-GAPS.md"
      ],
      "recommended_files": [
        "START-HERE.md",
        "COMPLETE-GUIDE.md",
        "REPLICATION-GUIDE.md",
        "PROJECT-SUMMARY.md",
        "DOCUMENTATION-INDEX.md",
        "start.sh"
      ],
      "css_integration": "Link to Nodus CSS in frontend/css/ directory",
      "port_strategy": "Use development_servers range (8080-8089)",
      "documentation_requirements": {
        "api_documentation": "MANDATORY for all web applications with APIs",
        "quick_start": "MANDATORY - 5-minute path to running application",
        "complete_guide": "RECOMMENDED - Full feature walkthrough",
        "development_notes": "MANDATORY - Capture build process for replication",
        "api_interactive_docs": "Auto-generate with FastAPI or document manually for Flask"
      }
    },
    "flask_api": {
      "description": "Flask REST API with PostgreSQL database",
      "directories": [
        "app/",
        "app/routes/",
        "app/models/",
        "app/utils/",
        "app/static/css/",
        "app/templates/",
        "migrations/",
        "tests/",
        "docs/"
      ],
      "required_files": [
        "app.py",
        "requirements.txt",
        "config.py",
        ".env.example",
        "README.md",
        "QUICK-START.md",
        ".gitignore",
        "Dockerfile",
        "docker-compose.yml",
        "docs/API.md",
        "DEVELOPMENT-NOTES.md",
        "NODUS-GAPS.md"
      ],
      "python_modules": ["flask", "flask-sqlalchemy", "psycopg2", "python-dotenv", "flask-cors"],
      "database": "PostgreSQL with SQLAlchemy ORM",
      "css_integration": "Serve Nodus CSS from app/static/css/",
      "api_documentation": "MANDATORY - Create comprehensive docs/API.md"
    },
    "dashboard": {
      "description": "Professional dashboard with data visualization",
      "directories": [
        "static/css/",
        "static/js/",
        "static/assets/",
        "templates/",
        "data/",
        "utils/",
        "tests/"
      ],
      "required_files": [
        "app.py",
        "requirements.txt",
        "config.py",
        ".env.example",
        "README.md",
        "templates/index.html",
        "static/js/dashboard.js"
      ],
      "components": ["navbar", "cards", "tables", "charts", "metrics"],
      "css_theme": "nodus-matte.css recommended for professional dashboards",
      "python_modules": ["flask", "pandas", "requests", "python-dotenv"],
      "features": ["real-time data", "responsive layout", "professional appearance"]
    },
    "data_processor": {
      "description": "Data processing and automation scripts",
      "directories": [
        "src/",
        "src/processors/",
        "src/utils/",
        "data/input/",
        "data/output/",
        "data/temp/",
        "config/",
        "logs/",
        "tests/"
      ],
      "required_files": [
        "main.py",
        "requirements.txt",
        "config.yaml",
        ".env.example",
        "README.md",
        ".gitignore"
      ],
      "python_modules": ["pandas", "requests", "schedule", "python-dotenv", "pydantic"],
      "patterns": ["modular processing", "configuration-driven", "logging", "error handling"]
    },
    "microservice": {
      "description": "Containerized microservice with Docker",
      "directories": [
        "app/",
        "app/api/",
        "app/models/",
        "app/services/",
        "app/utils/",
        "tests/",
        "docs/"
      ],
      "required_files": [
        "app/main.py",
        "requirements.txt",
        "Dockerfile",
        "docker-compose.yml",
        ".env.example",
        "README.md",
        "QUICK-START.md",
        ".gitignore",
        "app/config.py",
        "docs/API.md",
        "DEVELOPMENT-NOTES.md"
      ],
      "framework": "FastAPI recommended for microservices",
      "python_modules": ["fastapi", "pydantic", "asyncio", "python-dotenv"],
      "deployment": "Docker container with health checks",
      "port_strategy": "Check reserved ports, document new assignments",
      "api_documentation": "CRITICAL - FastAPI auto-generates but create detailed docs/API.md with examples"
    }
  },
  
  "github_integration": {
    "vscode_git_workflow": {
      "description": "VS Code integrated Git workflow for multiple projects",
      "setup_steps": [
        "Install GitLens extension in VS Code",
        "Configure Git user: git config --global user.name 'Your Name'",
        "Configure Git email: git config --global user.email 'your.email@example.com'",
        "Generate SSH key: ssh-keygen -t ed25519 -C 'your.email@example.com'",
        "Add SSH key to GitHub account",
        "Test connection: ssh -T git@github.com"
      ],
      "vscode_features": [
        "Source Control panel (Ctrl+Shift+G)",
        "GitLens for blame and history",
        "Integrated terminal for Git commands",
        "Diff viewer for changes",
        "Branch management in status bar"
      ],
      "workflow": [
        "Initialize repo: git init in project root",
        "Create .gitignore from template",
        "Stage files: git add . (or use VS Code Source Control)",
        "Commit: git commit -m 'Initial commit'",
        "Create GitHub repo (via VS Code or GitHub CLI)",
        "Add remote: git remote add origin git@github.com:username/repo.git",
        "Push: git push -u origin main"
      ]
    },
    "automated_repo_creation": {
      "github_cli_method": {
        "install": "Install GitHub CLI: gh auth login",
        "create_repo": "gh repo create project-name --public --source=. --remote=origin --push",
        "benefits": ["Creates repo and pushes in one command", "No manual GitHub UI needed"]
      },
      "vscode_extensions": [
        "GitHub Pull Requests and Issues",
        "GitLens â€” Git supercharged",
        "Git Graph",
        "GitHub Repositories"
      ]
    },
    "multi_project_strategy": {
      "workspace_organization": [
        "Use VS Code workspaces for related projects",
        "Each project gets its own Git repository",
        "Shared resources (like Nodus CSS) in separate repos",
        "Use submodules for shared dependencies"
      ],
      "naming_conventions": [
        "project-name-frontend",
        "project-name-backend", 
        "project-name-api",
        "shared-design-system",
        "utility-scripts"
      ],
      "repository_templates": [
        "Create template repos for common project structures",
        "Use GitHub template feature for quick project creation",
        "Include standard .gitignore, README, and structure"
      ]
    }
  },
  
  "theme_selection_criteria": {
    "decision_matrix": {
      "business_professional": {
        "theme": "nodus-matte.css",
        "indicators": ["dashboard", "admin", "enterprise", "corporate", "management"],
        "use_when": "Professional business applications requiring clean, distraction-free interface"
      },
      "premium_showcase": {
        "theme": "nodus-carbon-fiber.css", 
        "indicators": ["portfolio", "showcase", "premium", "high-end", "visual-impact"],
        "use_when": "Projects requiring sophisticated visual appeal and premium feel"
      },
      "minimal_clean": {
        "theme": "nodus-clean.css",
        "indicators": ["documentation", "blog", "simple", "minimal", "content-focused"],
        "use_when": "Content-focused applications with minimal interface requirements"
      }
    },
    "project_type_mapping": {
      "dashboards": "nodus-matte.css",
      "admin_panels": "nodus-matte.css", 
      "business_apps": "nodus-matte.css",
      "portfolios": "nodus-carbon-fiber.css",
      "landing_pages": "nodus-carbon-fiber.css",
      "documentation": "nodus-clean.css",
      "blogs": "nodus-clean.css",
      "apis": "nodus-clean.css"
    },
    "ai_selection_logic": [
      "Analyze project description for business vs creative keywords",
      "Consider target audience (business users vs general public)",
      "Evaluate complexity (complex dashboards vs simple content)",
      "Default to nodus-matte.css for professional applications"
    ]
  }
}